/* != Base Module - UNITS */

//
// @variables
//

//
// @functions
//

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

/* CONVERT PIXELS TO EMS */
/*
Parameters: @pixels value (no units), optional @context value (no units) e.g. if you are calculating padding on an element that has a font size applied already.
*/
@function em($pixels, $context: $textBase) {
  @return #{$pixels/$context}em;
}

@function px($pixels) {
  @return #{$pixels}px;
}

//
// @mixins
//

// Converts pixels to rems + pixel fallback
// - You can add a suffix (e.g. !important) and this will be added to both rules too
@mixin rem($property, $values, $suffix: null) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / $textBase  + rem));
      }

      @if $unit == "" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / $textBase  + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * $textBase  + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px #{$suffix};
  } @else {
    #{$property}: $px  #{$suffix};
    #{$property}: $rem  #{$suffix};
  }
}